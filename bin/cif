#!/usr/bin/perl -w

use strict;

# fix lib paths, some may be relative
BEGIN {
    require File::Spec;
    my @libs = ("lib", "local/lib", "/usr/local/lib/cif-protocol/pb-perl/lib");
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            unless ($bin_path) {
                if ( File::Spec->file_name_is_absolute(__FILE__) ) {
                    $bin_path = ( File::Spec->splitpath(__FILE__) )[1];
                }
                else {
                    require FindBin;
                    no warnings "once";
                    $bin_path = $FindBin::Bin;
                }
            }
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }
}

use lib '../libcif/lib';
use lib '../../iodef-pb-simple-perl/lib';

use CIF::Client;

use Getopt::Long qw(:config no_ignore_case bundling);
use Data::Dumper;
use CIF qw/debug/;

## TODO -- generate CIF::Format to wrap this
use Iodef::Pb::Format;

#my %opts;
#getopt('D:S:O:G:l:g:THL:p:f:q:c:s:r:C:zP:F', \%opts);


our $debug      = 0;

# config opts
my $config      = $ENV{'HOME'}.'/.cif';
my $outfile     = undef;
my @query       = ();

# query options
my $nolog       = 0;
my $confidence  = 0;
my $guid        = 0;
my $limit       = 500;

# plugin opts
my $plugin      = 'Table';
my $fields      = 0;
my $max_desc    = 100;

# display options
my $summary             = 0;
my $nomap               = 0;
our $uuid               = 0;
our $relateduuid        = 0;
my $round_confidence    = 0;
my $group_map           = 1;
my $compress_address    = 1;
my $table_showmeta      = 0;
my $filter_me           = 0;
my $sortby              = 'detecttime';
my $sortby_direction    = 'DESC';

my $help = 0;

my $gor = GetOptions(
	"debug|d=i"           => \$debug,
	"config|C=s"          => \$config,
	"outfile|O=s"         => \$outfile,
	"query|q=s@"          => \@query,
	"nolog|n=i"           => \$nolog,
	"confidence|c=i"      => \$confidence,
	"guid|g=s"            => \$guid,
	"limit|l=i"           => \$limit,
	"plugin|p=s"          => \$plugin,
	"fields|f"            => \$fields,
	"maxdesc|L=i"         => \$max_desc,
	"help|h"              => \$help,
	"summary|s"           => \$summary,
	"nomap|N"             => \$nomap,
	"uuid"                => \$uuid,
	"relateduuid"         => \$relateduuid,
	"roundconfidence|I"   => \$round_confidence,
	"groupmap|G"          => \$group_map,
	"compressaddress|z"   => \$compress_address,
	"tableshowmeta|M"     => \$table_showmeta,
	"filterme|F"          => \$filter_me,
	"sortby|S=s"          => \$sortby,
	"sortbydirection|D=s" => \$sortby_direction 
	);
	




die usage() unless($#query > -1);
die usage() if($help);

sub usage {
    return <<EOF;
Usage: perl $0 -q xyz.com

Standard Options:
    -h   --help:             this message
    -C   --config:           specify cofiguration file, default: $config
    -d # --debug:            debug level
    
Query Options:
    -q   --query:            query string
	
    -n   --nolog:            perform a "silent" query (no log query), default: $nolog
    -l   --limit:            set the default result limit (queries only), default is set on server, usually around 500.
    -c   --confidence:       lowest tolerated confidence (0.00 -- 100.00), default $confidence
    
Format Options:
    -p   --plugin:           output plugin ('Table','Snort','Csv'), default: Table
    -f   --fields:           set default output fields for default table display
    -S   --summary:          consolidated Text::Table output (default: True)
    -N   --nomap:            don't map restrictions
    -g   --guid:             filter by a specific group id (guid), ex: group1.example.com
    -G   --groupmap:         turn group mapping (guid to 'group name') on/off, default: $group_map
    
Nonstandard Options:
    -z                       compact address field to 32 chars, applies only to defalt table output, default: 1 (0 turns it off)
    -I   --roundconfidence:  round (down) confidence to the nearest integer

Example Queries:

    \$> perl $0 -q 1.2.3.4
    \$> perl $0 -q 1.2.3.0/24
    \$> perl $0 -q f8e74165fb840026fd0fce1fd7d62f5d0e57e7ac
    \$> perl $0 -q hut2.ru
    \$> perl $0 -q hut2.ru,f8e74165fb840026fd0fce1fd7d62f5d0e57e7ac
    \$> perl $0 hut2.ru
    
    \$> perl $0 -q malware
    \$> perl $0 -q malware
    \$> perl $0 -q infrastructure/network -p Snort
    \$> perl $0 -q domain/malware -p bindzone -c 95
    \$> perl $0 -q domain -c 40
    
    only return botnets for the specified netblock
    
    \$> perl $0 -q infrastructure/botnet,1.2.3.0/24 -p Snort
    

Configuration:

    configuration file ~/.cif should be readable and look something like:

    [client]
    apikey = xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
    driver = 'REST'
    # driver = 'ZeroMQ'
    
    # table_nowarning = 1
    # csv_noseperator = 1
    
    [client_rest]
    host = https://example.com:443/api
    timeout = 60
    # add this if you have a self signed cert
    verify_tls = 0
    
    # proxy = https://localhost:5555
    
    [client_zeromq]
    host = tcp://127.0.0.1:5555

Plugin Specific Configurations:

    Table:
        
        [client]
        table_nowarning = 1

    Csv:
        [client]
        # when we filter out commas in the various fields, do we replace them with "_"'s or just spaces
        csv_noseperator = 1

    Bindzone:
        
        [client]
        bindzone_path = /etc/namedb/

    Snort:
    
        [client]
        snort_startsid = 10000000

EOF
}

my ($err,$cli) = CIF::Client->new({
    config          => $ENV{'HOME'}.'/.cif',
});

die 'ERROR: '.$err if($err);

if($outfile){
    open(F,">",$outfile) || die($!);
}

my $ret;
($err,$ret) = $cli->search({
    query               => \@query,
    filter_me           => $filter_me,
    nolog               => $nolog,
    no_maprestrictions  => $nomap,
    confidence          => $confidence,
    limit               => $limit,
});

die 'ERROR: '.$err if($err);
unless($ret){
    debug('no results...') if($debug);
    exit(0);
}
 
my $responses = $ret;

debug('formatting as '.ucfirst($plugin).'...');
my @text;

my @iodef;

foreach my $response (@$responses){
	for (my $row = 0 ; $row <= $#{$response->{baseObjectType}} ; $row++) {
		my $bot = $response->{baseObjectType}->[$row];
		my $rowdata = $response->{data}->[$row];
		
		debug ("baseObjectType: $bot") if $debug;
	
		my $r_map = ($nomap) ? undef : $response->get_restriction_map();
		
		if ($bot eq "RFC5070_IODEF_v1_pb2") {
			my $unpacked = IODEFDocumentType->decode($rowdata);
			push @iodef, $unpacked;
		}
	}

	my $t = "";
	
    $t .= Iodef::Pb::Format->new({
        format              => ucfirst($plugin),
        #group_map           => $unpacked->get_group_map(),
        #restriction_map     => $r_map,
        data                => \@iodef, #$unpacked,
        compress_address    => $compress_address,
        confidence          => $response->{confidence}, #get_confidence($unpacked),
        #guid                => $unpacked->get_guid(),
        #uuid                => $unpacked->get_uuid(),
        description         => $response->{description}, #get_description($unpacked),
        restriction         => $response->{restriction}, #get_restriction($unpacked),
        reporttime          => $response->{ReportTime}, #get_reporttime($unpacked),
        table_nowarning     => $cli->get_table_nowarning(),
        config              => $cli->get_config(),
        table_uuid          => $uuid,
        table_relatedid     => $relateduuid,
        table_showmeta      => $table_showmeta,
        sortby              => $sortby,
        sortby_direction    => $sortby_direction,
    }) 	if ($#iodef > -1);
    

	
	
	$t .= "\n";
	
	## TODO -- add feed meta data to this.
	push(@text,$t);
	  
}

if($outfile){
    foreach (@text){
        print F $_;
    }
    close(F);
} else {
    foreach (@text){
        print $_;
    }
}
debug('done');
exit 0;

sub get_confidence {
	my $iod = shift;
	return $iod->{Incident}->[0]->{Assessment}->[0]->{Confidence}->{content};
}

sub get_description {
	my $iod = shift;
	return $iod->{Incident}->[0]->{Description}->[0]->{content};
}

sub get_reporttime {
	my $iod = shift;
	return $iod->{Incident}->[0]->{ReportTime};
}

sub get_restriction {
	my $iod = shift;
	return $iod->{Incident}->[0]->{restriction};
}

