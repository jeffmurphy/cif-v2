#!/usr/bin/perl -w

use strict;

# fix lib paths, some may be relative
BEGIN {
    require File::Spec;
    my @libs = ("lib", "local/lib", "/usr/local/lib/cif-protocol/pb-perl/lib");
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            unless ($bin_path) {
                if ( File::Spec->file_name_is_absolute(__FILE__) ) {
                    $bin_path = ( File::Spec->splitpath(__FILE__) )[1];
                }
                else {
                    require FindBin;
                    no warnings "once";
                    $bin_path = $FindBin::Bin;
                }
            }
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }
}

use lib '../libcif/lib';
use lib '../../iodef-pb-simple-perl/lib';

use CIF::Client;

use Getopt::Std;
use Data::Dumper;
use CIF qw/debug/;

## TODO -- generate CIF::Format to wrap this
use Iodef::Pb::Format;

my %opts;
getopt('D:S:O:G:l:g:THL:p:f:q:c:s:r:C:zP:F', \%opts);

our $debug       = ($opts{'d'}) ? 1 : 0;

# config opts
my $config      = $opts{'C'} || $ENV{'HOME'}.'/.cif';
my $outfile     = $opts{'O'};
my $query       = $opts{'q'} || shift;

# query options
my $nolog       = $opts{'n'} || 0;
my $confidence  = $opts{'c'} || 0;
my $guid        = $opts{'g'};
my $limit       = $opts{'l'} || 500;

# plugin opts
my $plugin      = $opts{'p'} || 'Table';
my $fields      = $opts{'f'};
my $max_desc    = $opts{'L'} || 100;


# display options
my $summary             = $opts{'S'};
my $nomap               = $opts{'N'};
our $uuid               = $opts{'u'} || 0;
our $relateduuid        = $opts{'R'} || 0;
my $round_confidence    = $opts{'I'} || 0;
my $group_map           = (defined($opts{'G'})) ? $opts{'G'} : 1;
my $compress_address    = (defined($opts{'z'})) ? $opts{'z'} : 1;
my $table_showmeta      = $opts{'M'} || 0;
my $filter_me           = $opts{'F'};
my $sortby              = $opts{'S'} || 'detecttime';
my $sortby_direction    = $opts{'D'} || 'DESC';

die usage() unless($query);
die usage() if($opts{'h'});

sub usage {
    return <<EOF;
Usage: perl $0 -q xyz.com

Standard Options:
    -h  --help:             this message
    -C  --config:           specify cofiguration file, default: $config
    
Query Options:
    -q  --query:            query string

    -n  --nolog:            perform a "silent" query (no log query), default: $nolog
    -l  --limit:            set the default result limit (queries only), default is set on server, usually around 500.
    -c  --confidence:       lowest tolerated confidence (0.00 -- 100.00), default $confidence
    
Format Options:
    -p  --plugin:           output plugin ('Table','Snort','Csv'), default: Table
    -f  --fields:           set default output fields for default table display
    -S  --summary:          consolidated Text::Table output (default: True)
    -N  --nomap:            don't map restrictions
    -g  --guid:             filter by a specific group id (guid), ex: group1.example.com
    -G  --groupmap:         turn group mapping (guid to 'group name') on/off, default: $group_map
    
Nonstandard Options:
    -z                      compact address field to 32 chars, applies only to defalt table output, default: 1 (0 turns it off)
    -I  --round_confidence: round (down) confidence to the nearest integer

Example Queries:

    \$> perl $0 -q 1.2.3.4
    \$> perl $0 -q 1.2.3.0/24
    \$> perl $0 -q f8e74165fb840026fd0fce1fd7d62f5d0e57e7ac
    \$> perl $0 -q hut2.ru
    \$> perl $0 -q hut2.ru,f8e74165fb840026fd0fce1fd7d62f5d0e57e7ac
    \$> perl $0 hut2.ru
    
    \$> perl $0 -q malware
    \$> perl $0 -q malware
    \$> perl $0 -q infrastructure/network -p Snort
    \$> perl $0 -q domain/malware -p bindzone -c 95
    \$> perl $0 -q domain -c 40

Configuration:

    configuration file ~/.cif should be readable and look something like:

    [client]
    apikey = xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
    driver = 'REST'
    # driver = 'ZeroMQ'
    
    # table_nowarning = 1
    # csv_noseperator = 1
    
    [client_rest]
    host = https://example.com:443/api
    timeout = 60
    # add this if you have a self signed cert
    verify_tls = 0
    
    # proxy = https://localhost:5555
    
    [client_zeromq]
    host = tcp://127.0.0.1:5555

Plugin Specific Configurations:

    Table:
        
        [client]
        table_nowarning = 1

    Csv:
        [client]
        # when we filter out commas in the various fields, do we replace them with "_"'s or just spaces
        csv_noseperator = 1

    Bindzone:
        
        [client]
        bindzone_path = /etc/namedb/

    Snort:
    
        [client]
        snort_startsid = 10000000

EOF
}

my ($err,$cli) = CIF::Client->new({
    config          => $ENV{'HOME'}.'/.cif',
});

die 'ERROR: '.$err if($err);

if($outfile){
    open(F,">",$outfile) || die($!);
}

my @q = split(/,/,$query);
my $ret;
($err,$ret) = $cli->search({
    query               => \@q,
    filter_me           => $filter_me,
    nolog               => $nolog,
    no_maprestrictions  => $nomap,
    confidence          => $confidence,
    limit               => $limit,
});

die 'ERROR: '.$err if($err);
unless($ret){
    debug('no results...') if($debug);
    exit(0);
}

my $feeds = $ret;

debug('formatting as '.ucfirst($plugin).'...');
my @text;
foreach my $feed (@$feeds){
    next unless($feed->get_data());

    my $r_map = ($nomap) ? undef : $feed->get_restriction_map();
    my $t = Iodef::Pb::Format->new({
        format              => ucfirst($plugin),
        group_map           => $feed->get_group_map(),
        restriction_map     => $r_map,
        data                => $feed->get_data(),
        compress_address    => $compress_address,
        confidence          => $feed->get_confidence(),
        guid                => $feed->get_guid(),
        uuid                => $feed->get_uuid(),
        description         => $feed->get_description(),
        restriction         => $feed->get_restriction(),
        reporttime          => $feed->get_ReportTime(),
        table_nowarning     => $cli->get_table_nowarning(),
        config              => $cli->get_config(),
        table_uuid          => $uuid,
        table_relatedid     => $relateduuid,
        table_showmeta      => $table_showmeta,
        sortby              => $sortby,
        sortby_direction    => $sortby_direction,
    });
    
    $t .= "\n";
    
    ## TODO -- add feed meta data to this.
    push(@text,$t);
}

if($outfile){
    foreach (@text){
        print F $_;
    }
    close(F);
} else {
    foreach (@text){
        print $_;
    }
}
debug('done');
