package CIF::Smrt::Plugin::Postprocessor::Malware::TCMalwareRegistry;
use base 'CIF::Smrt::Plugin::Postprocessor::Malware';

use strict;
use warnings;

use Regexp::Common qw/URI net/;
use Iodef::Pb::Simple qw(iodef_malware);
use Net::Abuse::Utils;

sub process {
    my $class   = shift;
    my $smrt    = shift;
    my $data    = shift;

    foreach my $i (@{$data->get_Incident()}){
        my $malware = iodef_malware($i);
        foreach my $m (@$malware){
            next unless($m->get_meaning() eq 'malware hash');
            my $ret = get_malware($m->get_content());
            if($ret){
                my $timestamp = DateTime->from_epoch(epoch => $ret->{'last_seen'});
                my $drate = ExtensionType->new({
                    meaning     => 'tc malware registry detection rate',
                    formatid    => 'percentage',
                    content     => $ret->{'detection_rate'},
                    dtype       => ExtensionType::DtypeType::dtype_type_real(),
                    restriction => RestrictionType::restriction_type_public(),
                });
                my $drate_timestamp = ExtensionType->new({
                    meaning     => 'tc malware registry detection rate timestamp',
                    formatid    => 'timestamp',
                    content     => $timestamp->ymd().'T'.$timestamp->hms().'Z',
                    dtype       => ExtensionType::DtypeType::dtype_type_string(),
                    restriction => RestrictionType::restriction_type_public(),
                });
                push(@{$i->get_AdditionalData},($drate,$drate_timestamp));
            }
        }
    }               
}

## TODO -- replace when Net::Abuse::Utils is updated to v0.13
sub get_malware {
    my $hash = shift;
    return unless($hash && lc($hash) =~ /^[a-z0-9]{32}$/);
    
    my $lookup = $hash.'.malware.hash.cymru.com';

    my $res = Net::Abuse::Utils::_return_rr($lookup, 'TXT') or return;
    my ($last_seen,$detection_rate) = split(/ /,$res);
    return({
        last_seen   => $last_seen,
        detection_rate  => $detection_rate,
    });
}
1;