#!/usr/bin/perl

use warnings;
use strict;

# fix lib paths, some may be relative
BEGIN {
    require File::Spec;
    my @libs = ("lib", "local/lib", "/opt/cif/lib/cif-protocol/pb-perl/lib");
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            unless ($bin_path) {
                if ( File::Spec->file_name_is_absolute(__FILE__) ) {
                    $bin_path = ( File::Spec->splitpath(__FILE__) )[1];
                }
                else {
                    require FindBin;
                    no warnings "once";
                    $bin_path = $FindBin::Bin;
                }
            }
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }

}

use lib '../libcif/lib';
use lib '../iodef-pb-simple-perl/lib';
use lib '../net-dns-match-perl/lib';

use Getopt::Std;
use DateTime;
use Config::Simple;
use Data::Dumper;
use CIF::Feed;
use CIF qw/debug/;

my %opts;
getopts('HVdC:S:R:c:D:l:h',\%opts);


our $debug          = $opts{'d'};
my $config          = $opts{'C'} || $ENV{'HOME'}.'/.cif';
my $specific_feed   = $opts{'S'};
my $roles           = $opts{'R'};
my $confidence      = $opts{'c'};
my $limit_days      = $opts{'D'} || 7;
my $limit           = $opts{'l'} || 50000;
my $mutex           = $opts{'L'} || '/tmp/cif_feed.lock';
my $restriction     = $opts{'r'} || 'private';
my $vaccum_only     = $opts{'V'};
my $vaccum_hash     = $opts{'H'};

my ($err,$obj) = CIF::Feed->new({
    config          => $config,
    confidence      => $confidence,
    limit           => $limit,
    limit_days      => $limit_days,
    specific_feeds  => $specific_feed,
    roles           => $roles,
    report_time     => time(),
});

die($err."\n\n") if($err);

die usage() if(exists $opts{'h'});

sub usage {
    my $usage_feeds = '['.join("|",@{$obj->get_feeds()}).']';
    return <<EOF;
Usage: perl $0 -c 95

    -h  --help:         this meessage

Basic Usage:
    -C  --config:       specify an alternate config location, default $config
    -d  --debug
    -c  --confidence:   minimal confidence (0.00 - 100.0)
    -l  --limit:        max feed records, default: $limit
    -D  --limit_days:   max days to go back in feed search, default: $limit_days

Advanced Usage:
    -R  --role:         run as a specific "role" (eg: group1_role_key)
    -S  --specific:     generate a specific feed (eg: infrastructure, domain, etc)
    -L  --mutex:        specify a different lockfile location, default: $mutex
    -V  --vaccum-only:  don't generate feeds, just vaccum the archive

Examples:

    cif_feed -c 65
    cif_feed -d -S $usage_feeds
    cif_feed -c 40 -S domain

EOF
}

$SIG{'INT'}     = 'cleanup';
$SIG{__DIE__}   = 'cleanup';

my $start = time();

sub cleanup {
    my $msg = shift;
    if($msg){   
        print $msg."\n";
    } else {
        print "\n\nCaught Interrupt (^C), Aborting\n";
    }
    remove_lock();
    exit(1);
}

sub remove_lock {
    system('rm '.$mutex);
}

if(-e $mutex && !$specific_feed){
    print 'already running, mutex found: '.$mutex."\n" if($debug);
    exit(-1);
}
my $ret = system('touch '.$mutex);
unless(defined($ret) && $ret == 0){
    die($!);
}

unless($vaccum_only){
    foreach my $feed (@{$obj->get_feeds()}){
        debug('processing: '.$feed);
        my ($err2,$ret) = $obj->process($feed);
    }
}

my $timestamp = DateTime->from_epoch(epoch => (time() - ((1 + $limit_days) * 84600)));
$timestamp = $timestamp->ymd().'T00:00:00Z';

debug('purging from: '.$timestamp);
$ret = $obj->purge_feeds({ 
    timestamp   => $timestamp,
});

debug('vaccuming: '.$timestamp);
$ret = $obj->vaccum({ timestamp => $timestamp });

die $err if($err);

debug('done...');

remove_lock();
exit(0);


